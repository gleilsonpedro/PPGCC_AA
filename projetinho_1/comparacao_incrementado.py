import random
import time
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from tabulate import tabulate
from forca_bruta import par_mais_proximo_forca_bruta
from divisao_conquista import par_mais_proximo_divisao_conquista

def gerar_pontos(n):
    """Gera um conjunto de n pontos 2D aleat√≥rios com coordenadas entre -2n e 2n."""
    limite = 2 * n
    return [(random.randint(-limite, limite), random.randint(-limite, limite)) for _ in range(n)]

# Gerar entre 100 e 200 valores de n aleat√≥rios entre 10 e 10.000, distribu√≠dos logaritmicamente
k = random.randint(100, 200)
n_values = sorted(set(map(int, np.logspace(1, 3.5, k))))  # Escala logar√≠tmica

# N√∫mero de execu√ß√µes para cada tamanho de entrada
m = random.randint(10, 20)

# Dicion√°rios para armazenar tempos de execu√ß√£o
tempos_forca_bruta = {}
tempos_divisao_conquista = {}

for n in n_values:
    total_tempo_fb = 0
    total_tempo_dc = 0
    diferencas = 0

    for _ in range(m):
        pontos = gerar_pontos(n)
        
        # Executa For√ßa Bruta
        inicio = time.time()
        _, _, dist_fb = par_mais_proximo_forca_bruta(pontos)
        fim = time.time()
        total_tempo_fb += (fim - inicio)
        
        # Executa Divis√£o e Conquista
        inicio = time.time()
        _, _, dist_dc = par_mais_proximo_divisao_conquista(pontos)
        fim = time.time()
        total_tempo_dc += (fim - inicio)
        
        # Verifica se os resultados s√£o diferentes
        if abs(dist_fb - dist_dc) > 1e-6:
            diferencas += 1
            print(f"n = {n}, Diferen√ßa detectada!")
            print(f"  - For√ßa Bruta: {dist_fb:.10f}")
            print(f"  - Divis√£o e Conquista: {dist_dc:.10f}")

    # Armazena os tempos m√©dios
    tempos_forca_bruta[n] = total_tempo_fb / m
    tempos_divisao_conquista[n] = total_tempo_dc / m

    if diferencas > 0:
        print(f"Aviso: {diferencas} diferen√ßas encontradas para n = {n}")

# Criar DataFrame para facilitar a manipula√ß√£o dos dados
df = pd.DataFrame({
    'Tamanho Entrada (n)': n_values,
    'For√ßa Bruta': [tempos_forca_bruta[n] for n in n_values],
    'Divis√£o e Conquista': [tempos_divisao_conquista[n] for n in n_values]
})

# Adicionar a raz√£o de tempo (FB/DC)
df['Raz√£o (FB/DC)'] = df['For√ßa Bruta'] / df['Divis√£o e Conquista']

# Legenda antes da tabela
print("\n=== INTERPRETA√á√ÉO DA TABELA ===")
print("- Coluna 'n': tamanho da entrada (quantidade de pontos)")
print("- Coluna 'Tempo For√ßa Bruta (s)': tempo m√©dio de execu√ß√£o do algoritmo de For√ßa Bruta")
print("- Coluna 'Tempo Divis√£o e Conquista (s)': tempo m√©dio de execu√ß√£o do algoritmo de Divis√£o e Conquista")
print("- Coluna 'Raz√£o (FB/DC)': quantas vezes a For√ßa Bruta foi mais lenta que a Divis√£o e Conquista")
print("  - Se for maior que 1: For√ßa Bruta foi mais lenta")
print("  - Se for aproximadamente 1: tempos semelhantes")
print("  - Se for 'inf': o tempo de Divis√£o e Conquista foi t√£o pequeno que a divis√£o gerou infinito")
print("=================================\n")

# üìã 4. Tabela Comparativa no Console
headers = ["n", "Tempo For√ßa Bruta (s)", "Tempo Divis√£o e Conquista (s)", "Raz√£o (FB/DC)"]
print(tabulate(df.values, headers=headers, tablefmt="github"))

# üíæ Opcional: Salvar os resultados em CSV para an√°lise posterior
df.to_csv("comparacao_tempos.csv", index=False)

# Conclus√£o Final:
# ‚úÖ Para n pequeno, os tempos s√£o t√£o r√°pidos que podem aparecer como 0.0, resultando em valores inf para Raz√£o FB/DC.
# ‚úÖ Conforme n cresce, a For√ßa Bruta se torna extremamente lenta em compara√ß√£o com a Divis√£o e Conquista.
# ‚úÖ A Raz√£o FB/DC cresce exponencialmente, confirmando que a For√ßa Bruta √© O(n^2) e a Divis√£o e Conquista √© O(nlogn).
# ‚úÖ Para valores grandes de n, a For√ßa Bruta pode levar mais de 50x o tempo da Divis√£o e Conquista!


# üìä 1. Boxplot - Distribui√ß√£o dos Tempos
plt.figure(figsize=(8, 5))
sns.boxplot(data=df[['For√ßa Bruta', 'Divis√£o e Conquista']])
plt.title("Distribui√ß√£o dos Tempos de Execu√ß√£o")
plt.ylabel("Tempo (s)")
plt.grid()
plt.show()

# üìà 2. Gr√°fico de Dispers√£o com Ajuste de Regress√£o
sns.lmplot(x='Tamanho Entrada (n)', y='For√ßa Bruta', data=df, ci=None, order=2)
plt.title("Tend√™ncia de Crescimento - For√ßa Bruta")
plt.show()

sns.lmplot(x='Tamanho Entrada (n)', y='Divis√£o e Conquista', data=df, ci=None, order=2)
plt.title("Tend√™ncia de Crescimento - Divis√£o e Conquista")
plt.show()

# üìâ 3. Gr√°fico de Raz√£o Logar√≠tmica
plt.figure(figsize=(8, 5))
plt.plot(df['Tamanho Entrada (n)'], df['Raz√£o (FB/DC)'], marker='o', linestyle='--', color='purple')
plt.xscale("log")
plt.yscale("log")
plt.xlabel("Tamanho da Entrada (n)")
plt.ylabel("Raz√£o de Tempo (For√ßa Bruta / Divis√£o e Conquista)")
plt.title("Compara√ß√£o de Efici√™ncia em Escala Logar√≠tmica")
plt.grid()
plt.show()

# üìã 4. Tabela Comparativa no Console
headers = ["n", "Tempo For√ßa Bruta (s)", "Tempo Divis√£o e Conquista (s)", "Raz√£o (FB/DC)"]
print(tabulate(df.values, headers=headers, tablefmt="github"))

# üíæ Opcional: Salvar os resultados em CSV para an√°lise posterior
df.to_csv("comparacao_tempos.csv", index=False)

